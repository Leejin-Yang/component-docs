"use strict";(self.webpackChunklayout_component_hp=self.webpackChunklayout_component_hp||[]).push([[795],{8986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const a={title:"Flex"},l="Flex Component",r={unversionedId:"layout/flex",id:"layout/flex",title:"Flex",description:"The Flex component is a utility component that you can use to control layout with CSS flexbox. It exposes properties to control the direction, wrapping behavior, alignment, and spacing of its children.",source:"@site/docs/layout/flex.mdx",sourceDirName:"layout",slug:"/layout/flex",permalink:"/component-docs/docs/layout/flex",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/docs/docs/layout/flex.mdx",tags:[],version:"current",frontMatter:{title:"Flex"},sidebar:"tutorialSidebar",previous:{title:"Layout",permalink:"/component-docs/docs/category/layout"}},s={},p=[{value:"Props",id:"props",level:2},{value:"Usage",id:"usage",level:2},{value:"Props",id:"props-1",level:2},{value:"Usage",id:"usage-1",level:2}],m={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"flex-component"},"Flex Component"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Flex")," component is a utility component that you can use to control layout with CSS flexbox. It exposes properties to control the direction, wrapping behavior, alignment, and spacing of its children."),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"direction"),": Controls the direction of the flex items. Equivalent to CSS ",(0,i.kt)("inlineCode",{parentName:"li"},"flex-direction"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"wrap"),": Controls whether the flex items are forced onto one line or can wrap onto multiple lines. Equivalent to CSS ",(0,i.kt)("inlineCode",{parentName:"li"},"flex-wrap"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"justify"),": Defines how space is distributed between and around content items along the main-axis of a flex container. Equivalent to CSS ",(0,i.kt)("inlineCode",{parentName:"li"},"justify-content"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"alignContent"),": Aligns a flex container's lines within when there is extra space in the cross-axis. Equivalent to CSS ",(0,i.kt)("inlineCode",{parentName:"li"},"align-content"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"alignItems"),": Defines how space is distributed between and around flex items along the cross-axis of their container. Equivalent to CSS ",(0,i.kt)("inlineCode",{parentName:"li"},"align-items"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"gap"),": Defines size of gap between grid rows & columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"width")," / ",(0,i.kt)("strong",{parentName:"li"},"height"),": The width and height properties are used in many contexts by various other components.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Flex direction='row' justify='space-between'>\n  <Flex.Item grow={1}>I grow</Flex.Item>\n  <Flex.Item>I don't</Flex.Item>\n</Flex>\n")),(0,i.kt)("h1",{id:"flexitem-component"},"FlexItem Component"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FlexItem")," component is used as a child of a parent ",(0,i.kt)("inlineCode",{parentName:"p"},"Flex"),". It exposes properties for controlling order, growth, shrinkage, basis size and alignment."),(0,i.kt)("h2",{id:"props-1"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"order"),": Controls the order in which this item appears amongst its siblings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"grow")," / ",(0,i.kt)("strong",{parentName:"li"},"shrink")," : Determines how much this item should grow or shrink relative to other flexible items in its parent container."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"basis")," : Specifies an optimal size for an element\u2019s main axis dimension (width or height).")),(0,i.kt)("h2",{id:"usage-1"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Flex direction='row' justify='space-between'>\n  <Flex.Item grow={1}>I grow</Flex.Item>\n  <Flex.Item>I don't</Flex.Item>\n</Flex>\n")))}c.isMDXComponent=!0}}]);